
openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /Users:
    get:
      summary: Get all Users
      tags:
        - Users
      responses:
        '200':
          description: A list of Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new User
      tags:
        - Users
      requestBody:
        description: The user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /Users/{userId}:
    get:
        summary: Get all tasks for a specific user
        tags:
          - tasks
        parameters:
          - name: userId
            in: path
            required: true
            description: ID of the user whose tasks to retrieve
            schema:
              type: integer
        responses:
          '200':
            description: A list of tasks for the user
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
          '404':
            description: User not found
  /Users/{id}:
    patch:
      summary: Update User by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: integer
            format: uint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Email:
                  type: string
                  example: "почта"
                Password:
                  type: string
                  example: "пароль"
      responses:
        '200':
          description: Successful user update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '400':
          description: Bad request
    delete:
      summary: Удаление элемента
      description: Удаляет элемент по заданному идентификатору.
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор элемента для удаления.
          schema:
            type: string
      responses:
        '204':
          description: Элемент успешно удален.
        '404':
          description: Элемент не найден.
        '500':
          description: Ошибка сервера.


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: uint
        Email:
          type: string
        Password:
          type: string
    Task:
        type: object
        properties:
          id:
            type: integer
            format: uint
          task:
            type: string
          is_done:
            type: boolean
          user_id:
            type: integer
            format: uint


